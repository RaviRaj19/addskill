#) find out the how the source code is built and executed
#) find out how is the memory managed during runtime of your code 
#)  make a cheat sheet for the basic building blocks of your language

create githubprofile and leetcode profile


-----------------------------------------------------------------------------
1) find out the how the source code is built and executed

ANS= Compiling the Program
A program has to be converted to a form the Java VM can understand so any computer with a Java VM can interpret and run the program. Compiling a Java program means taking the programmer-readable text in your program file (also called source code) and converting it to bytecodes, which are platform-independent instructions for the Java VM.
The Java compiler is invoked at the command line on Unix and DOS shell operating systems as follows:
  javac ExampleProgram.java

Note: Part of the configuration process for setting up the Java platform is setting the class path. The class path can be set using either the -classpath option with the javac compiler command and java interpreter command, or by setting the CLASSPATH environment variable. You need to set the class path to point to the directory where the ExampleProgram class is so the compiler and interpreter commands can find it. See Java 2 SDK Tools for more information. 

Interpreting and Running the Program
Once your program successfully compiles into Java bytecodes, you can interpret and run applications on any Java VM, or interpret and run applets in any Web browser with a Java VM built in such as Netscape or Internet Explorer. Interpreting and running a Java program means invoking the Java VM byte code interpreter, which converts the Java byte codes to platform-dependent machine codes so your computer can understand and run the program.


in case of python 

Compilation 
The source code in python is saved as a .py file which is then compiled into a format known as byte code. Compilation is simply a translation step. Byte code is a lower level and platform independent machine code which represents your source code. After the compilation, the code is stored in .pyc files and is regenerated when the source is updated or when it is necessary to do so. This process is known as compilation.
Linking 
The byte code in the .pyc file is then loaded into the python runtime and interpreted by a python virtual machine that reads each instruction in the .pyc file and executes whatever operation is needed. Linking is the final phase where all the functions are linked with their definitions as the linker knows where all these functions are implemented. This process is known as linking.


